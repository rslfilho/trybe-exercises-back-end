// Exercício 1 : Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes . Algumas dicas:
// arredonde para baixo o valor da idade;
// calcule a idade usando a diferença entre a data corrente e a data de nascimento;
// 1 dia é igual a 86400000 milissegundos.
db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {
              $subtract: ["$$NOW", "$dataNascimento"],
            },
            86400000 * 365,
          ],
        },
      },
    },
  },
]);

// Exercício 2 : Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.
db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {
              $subtract: ["$$NOW", "$dataNascimento"],
            },
            86400000 * 365,
          ],
        },
      },
    },
  },
  {
    $match: {
      idade: { $gte: 18, $lte: 25 },
    },
  },
  {
    $count: "clientes",
  },
]);

// Exercício 3 : Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras .
db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {
              $subtract: ["$$NOW", "$dataNascimento"],
            },
            86400000 * 365,
          ],
        },
      },
    },
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clientId",
      foreignField: "clientId",
      as: "compras",
    },
  },
]);

// Exercício 4 : Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020 .
db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {
              $subtract: ["$$NOW", "$dataNascimento"],
            },
            86400000 * 365,
          ],
        },
      },
    },
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clientId",
      foreignField: "clientId",
      as: "compras",
    },
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate('2019-06-01'),
        $lte: ISODate('2020-03-31')
      },
    },
  },
]);

// Exercício 5 : Confira o número de documentos retornados pelo pipeline com o método itcount() . Até aqui, você deve ter 486 documentos sendo retornados.
db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {
              $subtract: ["$$NOW", "$dataNascimento"],
            },
            86400000 * 365,
          ],
        },
      },
    },
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clientId",
      foreignField: "clientId",
      as: "compras",
    },
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate('2019-06-01'),
        $lte: ISODate('2020-03-31')
      },
    },
  },
]).itcount();

// Exercício 6 : Ainda nesse pipeline , descubra os 5 estados com mais compras.
db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {
              $subtract: ["$$NOW", "$dataNascimento"],
            },
            86400000 * 365,
          ],
        },
      },
    },
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clientId",
      foreignField: "clientId",
      as: "compras",
    },
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate('2019-06-01'),
        $lte: ISODate('2020-03-31')
      },
    },
  },
  {
    $group: {
      _id: "$endereco.uf",
      quantidade: { $sum: 1 },
    },
  },
  {
    $sort: { quantidade: -1 },
  },
  {
    $limit: 5,
  },
]);

// Exercício 7 : Descubra o cliente que mais consumiu QUEIJO PRATO . Retorne um documento com a seguinte estrutura:
db.vendas.aggregate([
  {
    $unwind: "$itens",
  },
  {
    $match: {
      "itens.nome": "QUEIJO PRATO",
    },
  },
  {
    $group: {
      _id: "$clienteId",
      quantidade: {
        $sum: "$itens.quantidade",
      },
    },
  },
  {
    $sort: { quantidade: -1 },
  },
  {
    $limit: 1,
  },
  {
    $lookup: {
      from: "clientes",
      let: { id: "$_id" },
      pipeline: [
        {
          $match: {
            $expr: {
              $eq: ["$clienteId", "$$id"],
            },
          },
        },
        {
          $project: {
            _id: 0,
            nome: 1,
            uf: "$endereco.uf",
          },
        },
      ],
      as: "cliente",
    },
  },
  {
    $unwind: "$cliente",
  },
  {
    $project: {
      _id: 0,
      nomeDoCliente: "$cliente.nome",
      uf: "$cliente.uf",
      totalConsumido: "$quantidade",
    },
  },
]);

// Exercício 8 : Selecione todas as vendas do mês de Março de 2020 , com status EM SEPARACAO . Acrescente um campo chamado dataEntregaPrevista com valor igual a três dias após a data da venda. Retorne apenas os campos clienteId , dataVenda e dataEntregaPrevista .
db.vendas.aggregate([
  {
    $match: {
      $and: [
        { status: "EM SEPARACAO" },
        { dataVenda: { $gte: ISODate("2020-03-01"), $lte: ISODate("2020-03-31") } },
      ],
    },
  },
  {
    $addFields: {
      dataEntregaPrevista: {
        $add: ["$dataVenda", 86400000 * 3],
      },
    },
  },
  {
    $project: {
      _id: 0,
      clienteId: 1,
      dataVenda: 1,
      dataEntregaPrevista: 1,
    },
  },
]);

// Bônus
// Calcule a diferença absoluta em dias entre a data da primeira entrega prevista e a última, considerando o pipeline do exercício 8.
db.vendas.aggregate([
  {
    $match: {
      $and: [
        { status: "EM SEPARACAO" },
        { dataVenda: { $gte: ISODate("2020-03-01"), $lte: ISODate("2020-03-31") } },
      ],
    },
  },
  {
    $addFields: {
      dataEntregaPrevista: {
        $add: ["$dataVenda", 86400000 * 3],
      },
    },
  },
  {
    $project: {
      _id: 0,
      clienteId: 1,
      dataVenda: 1,
      dataEntregaPrevista: 1,
    },
  },
  {
    $group: {
      _id: null,
      primeiraEntrega: {
        $min: "$dataEntregaPrevista",
      },
      ultimaEntrega: {
        $max: "$dataEntregaPrevista",
      },
    },
  },
  {
    $project: {
      _id: 0,
      diferencaEntregas: {
        $concat: [
          {
            $toString: {
              $round: [
                {
                  $divide: [
                    { $subtract: ["$ultimaEntrega", "$primeiraEntrega"] },
                    86400000,
                  ]
                },
              ],
            },
          },
          " dias",
        ],
      },
    },
  },
]);
